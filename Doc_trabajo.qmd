---
title: "Análisis del Dataset spotify-2023"
author: 
  - name: Ángel Álamo
  - name: Juanjo Doblas
  - name: Óscar Vanrell 
format: html
editor: visual
execute:
  echo: false
---

## Introducción

En este documento se presentará un estudio detallado del Dataset Spotify 2023, obtenido de la página web Kaggle y que podéis encontrar en este [enlace](https://www.kaggle.com/datasets/nelgiriyewithana/top-spotify-songs-2023/). La base de datos original ya es ordenada (o _tidy_), por lo que no realizaremos ninguna modificación

Respecto al estudio, estará enfocado en determinar cuáles son las características comunes entre las canciones más reproducidas, para ello, intentaremos responder las siguientes preguntas para obtener conclusiones:

1. Analisis de la popularidad de la canción según la estación del año en que salió la canción.

2. Qué características son comunes entre las 100 canciones más reproducidas.

3. ¿Son igual de famosas las canciones en distintas plataformas?

4. Que artista tiene mas canciones en listas de Spotify

5. Top canciones/artistas con mayores reproducciones en las plataformas

6. Top 3 artistas con más canciones en el dataset (y porcentajes) y analizar sus canciones

7. correlacion entre listas y reproducciones de Spotify `r #La 7 y la 3 son iguales?`

8. Canciones más famosas por décadas y mirar si cambian las caracteristicas comunes

`r # diferenciar entre solo o colaboracion, mode `


Una vez explicado el objetivo, mostremos los datos que contiene el Dataset.

## Análisis multivariante exploratorio de datos

Primero carguemos la librería 'tidyverse'.

```{r libreria, include = FALSE}
library(tidyverse)
```

Ahora mostremos un pequeño resumen del conjunto de datos:



```{r dataset, warning = FALSE}
spotify = read_csv(file = "spotify-2023.csv", show_col_types = FALSE)

# Cambiamos el tipo de los valores

spotify2 <- spotify %>% 
  mutate(streams = as.integer(streams), 
         released_year = as.ordered(released_year),
         released_month = as.ordered(released_month),
         released_day = as.ordered(released_day)) %>%
         #artist_count = as.ordered(artist_count)
  mutate(across(where(is.character), as.factor)) # chr a factor

spotify2 %>% 
  glimpse
```

### Descripción de las variables

Realicemos una descripción de cada variable:

-   *track_name*: variable cualitativa que muestra el nombre de la canción. Mostramos las 5 primeras canciones presentes:

```{r head track name}
head(spotify2$track_name,5)
```


-   *artist(s)_name*: variable cualitativa que muestra el nombre del artista (o artistas) de la canción.

```{r head artist name}
head(spotify2$`artist(s)_name`,5)
```


-   *artist_count*: variable cualitativa que mide el número de artistas que contribuyen a la canción.

```{r summary artist count}
summary(spotify2$artist_count)
```

-   *released_year*: variable cualitativa ordinal que representa el año en el que se lanzó.

```{r summary released year}
summary(spotify2$released_year)
```


-   *released_month*: variable cualitativa ordinal que representa el mes en el que se lanzó.

```{r summary released month}
summary(spotify2$released_month)
```


-   *released_day*: variable cualitativa ordinal que representa el día en el que se lanzó.

```{r summary released day}
summary(spotify2$released_day)
```


-   *in_spotify_playlists*: variable cuantitativa que mide el número de listas de reproducción de Spotify en las que está incluida la canción.

```{r summary spotify playlists}
summary(spotify2$in_spotify_playlists)
```


-   *in_spotify_charts*: variable cuantitativa que mide la presencia y el rango de la canción en las listas de Spotify. `r # imagino que cuanto mas cerca del 0 mejor no? NI IDEA DE COMO FUNCIONA`

```{r summary spotify charts}
summary(spotify2$in_spotify_charts)
```




-   *streams*: variable cuantitativa que representa el número de reproducciones en Spotify

```{r summary streams}
summary(spotify2$streams)
```


-   *in_apple_playlists*: variable cuantitativa que mide el número de listas de reproducción de Apple Music en las que está incluida la canción.

```{r summary apple playlists}
summary(spotify2$in_apple_playlists)
```


-   *in_apple_charts*: variable cauntitativa que mide la presencia y el rango de la canción en las listas de Apple Music.

```{r summary apple charts}
summary(spotify2$in_apple_charts)
```


-   *in_deezer_playlists*: variable cuantitativa que mide el número de listas de reproducción de Deezer en las que está incluida la canción.

```{r summary deezer playlists}
summary(spotify2$in_deezer_playlists)
```


-   *in_deezer_charts*: variable cuantitativa que mide la presencia y el rango de la canción en las listas de Deezer.

```{r summary deezer charts}
summary(spotify2$in_deezer_charts)
```


-   *in_shazam_charts*: variable cuantitativa que mide la presencia y el rango de la canción en las listas de Shazam.

```{r summary shazam charts}
summary(spotify2$in_shazam_charts)
```


-   *bpm*: variable cuantitativa que mide el número de beats por minuto (bpm) de la canción.

```{r summary bpm}
summary(spotify2$bpm)
```


-   *key*: variable cualitativa que expresa la tonalidad de la canción.

```{r summary key}
summary(spotify2$key)
```


-   *mode*: variable cualitativa que representa la escala de la canción

```{r summary mode}
summary(spotify2$mode)
```


-   *danceability_%*: variable cuantitativa que indica en porcentaje qué tan adecuada es la canción para bailar.

```{r summary danceability}
summary(spotify2$`danceability_%`)
```


-   *valence_%*: variable cuantitativa que indica en porcentaje la positividad del contenido musical de la canción.

```{r summary valence}
summary(spotify2$`valence_%`)
```


-   *energy_%*: variable cuantitativa que indica en porcentaje el nivel de energía percibido de la canción.

```{r summary energy}
summary(spotify2$`energy_%`)
```


-   *acousticness_%*: variable cuantitativa que indica en porcentaje la cantidad de sonido acústico en la canción.

```{r summary acousticness}
summary(spotify2$`acousticness_%`)
```


-   *instrumentalness_%*: variable cuantitativa que indica en porcentaje la cantidad de contenido instrumental en la canción.

```{r summary instrumentalness}
summary(spotify2$`instrumentalness_%`)
```


-   *liveness_%*: variable cuantitativa que indica en porcentaje la presencia de elementos de actuación en directo.

```{r summary liveness}
summary(spotify2$`liveness_%`)
```


-   *speechiness_%*: variable cuantitativa que indica en porcentaje la cantidad de palabras habladas en la canción.

```{r summary speechiness}
summary(spotify2$`speechiness_%`)
```

### Matriz de dispersión

```{r matriz de dispersion, fig.height=20, fig.width=20}
spotify2 %>%
  select(where(is.numeric)) %>%
  na.omit() %>% 
  pairs(pch = 18)
```

### Matriz de covarianzas



```{r matriz de covarianzas, fig.height=10, fig.width=10}
library(ggcorrplot)
spotify2 %>%
  select(where(is.numeric)) %>%
  na.omit(.) %>% 
  cor(.) %>% 
  ggcorrplot(., hc.order = TRUE,
        type = "lower",
        colors = c("blue",
                    "white", "red"))
```







# Estudio caracteristicas de las canciones:


Correlación de las caracteristicas de una cancion para responder a la pregunta de que caracteristicas comunes tienen las canciones mas exitosas.



```{r, fig.width = 10, fig.height = 6}
library(psych)
spotify2 %>%
  select(streams,bpm, 18:24) %>%
  na.omit(.) %>% 
  cor(.) %>% 
  corPlot(.,
       cex = 0.5
       )
```
```{r, fig.width = 10, fig.height = 6}
spotify2 %>%
  ggplot(aes(x=`energy_%`,y=`acousticness_%`)) +
  geom_point(size = 2,  na.rm = TRUE) + 
  geom_smooth(method = "lm",col="pink",lwd=1, alpha = 0.2) + 
  theme_bw() #+ 
  #scale_y_continuous(limits = c(0,600))
```

`r # diferenciar entre mode major o minor??`

```{r, fig.width = 10, fig.height = 6}
library(MVA)
a1 <-spotify2 %>%
  select(`energy_%`,`acousticness_%`)%>%
  na.omit %>% as.matrix()



g<- bvbox(a1,xlab = "energia", 
           ylab = "acustica",
      pch = 19, cex = 1.25, col = "red")

```

```{r, fig.width = 10, fig.height = 6}
spotify2 %>%
  ggplot(aes(x=`danceability_%`,y=`valence_%`)) +
  geom_point(size = 2,  na.rm = TRUE) + 
  geom_smooth(method = "lm",col="pink",lwd=1, alpha = 0.2) + 
  theme_bw() #+ 
  #scale_y_continuous(limits = c(0,600))
```

```{r, fig.width = 10, fig.height = 6}
library(MVA)
a1 <-spotify2 %>%
  select(`danceability_%`,`valence_%`)%>%
  na.omit %>% as.matrix()



g<- bvbox(a1,xlab = "energia", 
           ylab = "acustica",
      pch = 19, cex = 1.25, col = "red")

```
```{r, fig.width = 10, fig.height = 10}
#a<-spotify2 %>%
 # select(bpm,mode, 18:24) %>%
  #na.omit(.)
#library(GGally)
#ggpairs(a)
```



# Estuido por plataformas:

```{r, fig.width = 15, fig.height = 8}
library(psych)
spotify2 %>%
  select( 7:14) %>%
  na.omit(.) %>% 
  cor(.) %>% 
  corPlot(.,
       cex = 1 , main = "Correlación Entre Plataformas"
       )
```




#Top 100 canciones y sus caracteristicas:


Veamos cuales son las 10 canciones mas escuchadas:
```{r}

a10 <- spotify2 %>%
  arrange(desc(streams)) %>%
  slice_head( n = 10 )
head(a10)
```

```{r, fig.width = 12, fig.height = 6}


a10  %>%
  ggplot() + 
  geom_col(aes(x = track_name , y = streams, fill = `artist(s)_name`)) +
  
  labs(title = "Top 10 canciones mas reproducidas en Spotify",x = "Canción", y = "Reproducciones ") +
  theme_bw() + 
  guides(fill = guide_legend(title = "Artista")) +
  theme(axis.text = element_text(face = "bold"),
        axis.title = element_text(face = "bold"),
        legend.title = element_text(size = 10, face = "bold"))



```

`r #Quiero un grafico con las 10 canciones mas reproducidas en orden decreciente, pero a pesar de cambiar el orden de las filas del data, me lo sigue poniendo como le sale de los cojones. Y cambiar colores que son feos`



`r #Aqui me gustaria hacer otro gráfico con los artistas que más reproducciones tienen en spoty pero ahora no se como sumar todas las reproducciones de cada cancion por artista. Lo que sigue es un intento pero nop:`
```{r, fig.width = 12, fig.height = 6}


a10  %>%
  group_by(`artist(s)_name`) %>% 
  summarise(total_streams = sum(streams), .groups = "drop") %>%
  ggplot() + 
  geom_col(aes(x = `artist(s)_name` , y = total_streams, fill = `artist(s)_name`)) +
  
  labs(title = "Top 10 artistas con mas reproducciones en Spotify",x = "Artista", y = "Reproducciones ") +
  theme_bw() + 
  guides(fill = guide_legend(title = "Artista")) +
  theme(axis.text = element_text(face = "bold"),
        axis.title = element_text(face = "bold"),
        legend.title = element_text(size = 10, face = "bold"))



```


```{r,fig.width = 10, fig.height = 6}

a100 <- spotify2 %>%
  slice_max(streams, n = 100)


a100 %>%
  select(streams,bpm, 18:24) %>%
  na.omit(.) %>% 
  cor(.) %>% 
  corPlot(.,
       cex = 0.5
       )

```
`r #Yo diria que hay más correlación, mirad top 50 si quereis y podemos mirar de sacar conclusiones`



