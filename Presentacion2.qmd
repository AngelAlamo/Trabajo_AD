---
title: "Análisis multivariante de las canciones más escuchadas en Spotify"
author: "by Óscar Vanrell, Ángel Álamo y Juanjo Doblas"
format: revealjs
editor: visual
embed-resources: true
#width: 1500
height: 800
---

```{r librerias, include = FALSE}
library(tidyverse)
library(ggplot2)
library(patchwork)
library(ggcorrplot)
library(psych)
library(patchwork)
library(MVA)
library(lessR)
library(GGally)
library(ggpubr)
library(ggradar)
library(corrplot)
```

## Índice

1- Dataset, fuente, problema y limpieza de datos

2- Variables: descripción

3- Puntos de interés

4- Vector de medias y matriz de correlación

5- Análisis multivariante

6- Conclusión

## Fuente y contexto del problema

Dataset: Most Streamed Spotify Songs 2023

Fuente: obtenido de la página web Kaggle, [enlace](https://www.kaggle.com/datasets/nelgiriyewithana/top-spotify-songs-2023/)

Contexto: canciones anteriores a la fecha 14/7/2023

Objetivo: análisis enfocado en determinar cuáles son los **factores que presentan las canciones más reproducidas**

## Limpieza de los datos

```{r dataset, warning = FALSE, echo = TRUE}
spotify = read_csv(file = "spotify-2023.csv", show_col_types = FALSE)



breaks_bpm = c("60", "100", "120", "210")



# Cambiamos el tipo de los valores
spotify2 <- spotify %>% 
  mutate(streams = as.numeric(streams),
         released_month = as.ordered(released_month),
         released_day = as.ordered(released_day),
         key = factor(key, levels = c("C", "C#", "D", "D#", "E", "F", "G", "G#", "A", "A#", "B"))) %>%
  mutate(across(where(is.character), as.factor)) %>% # chr a factor
  
  # Creamos la variable colaboración
  mutate("collaboration" = case_when(
    artist_count == 1 ~ "solo",
    artist_count %in% 2:10 ~ "collaboration", 
    NA ~ NA)) %>%
  
  # Creamos y añadimos la variable reproducciones por artista y la posicionamos antes de el dia de lanzamiento
  group_by(`artist(s)_name`) %>%
  mutate("artist_streams" = sum(streams)) %>%
  ungroup() %>%
  
  # Creamos las variables "rango_bpm" ; "tempo"
  mutate(rango_bpm = cut(bpm, breaks = breaks_bpm, include.lowest = TRUE),
         tempo = factor(case_when(
           between(bpm, 60, 100) ~ "Lenta",
           between(bpm, 101, 120) ~ "Normal",
           between(bpm, 121, 210) ~ "Rápida"
         ))) %>% 
  relocate(rango_bpm, .before = key) %>% 
  relocate(tempo, .after = rango_bpm) %>% 
  
  # Renombramos variables
  dplyr::rename("dance%" = `danceability_%`,
         "valence%" = `valence_%`,
        "energy%" = `energy_%`,
         "acoustic%" = `acousticness_%`,
         "instrumental%" = `instrumentalness_%`,
         "live%" = `liveness_%`,
         "speech%" = `speechiness_%`,
         artist = `artist(s)_name`) %>% 
  
  
  # Creamos la variable epoca
  mutate(epoca = case_when(
  between(released_year, 1930, 1999) ~ "Epoca_1",
  between(released_year, 2000, 2015) ~ "Epoca_2",
  between(released_year, 2016, 2021) ~ "Epoca_3",
  between(released_year, 2022, 2023) ~ "Epoca_4",
  )) %>% 
  relocate(epoca, .after = released_year) %>% 
  mutate(epoca = ordered(epoca, labels = c("Epoca_1", "Epoca_2", "Epoca_3", "Epoca_4"))) %>% 
  
  
  # Añadimos la variable estación de lanzamiento
  mutate("released_season" = case_when(
    released_month %in% c(12, 1, 2) ~ "winter",
    released_month %in% 3:5 ~ "spring",
    released_month %in% 6:8 ~ "summer",
    released_month %in% 9:11 ~ "autumn",
    NA ~ NA)) %>% 
  
  # Necesario para definir la variable época
  mutate(released_year = as.ordered(released_year)) %>% 

  # Eliminamos ciertas variables
  select(!contains("charts")) %>% 
  
  # Recolocamos las variables
  relocate(streams, .after = artist_count) %>% 
  relocate(released_day, .before = released_year) %>% 
  relocate(released_month, .before = released_year) %>% 
  relocate(artist, .before = track_name) %>%
  relocate(released_season, .before = released_year) %>%
  relocate(artist_streams, .before = released_day) %>%
  relocate(collaboration, .before = streams)

# Orden personalizado de las estaciones del año
orden_estaciones <- c("spring", "summer", "autumn", "winter")

# Cambia el orden de las estaciones del año
spotify2$released_season <- factor(spotify2$released_season,
                                   levels = orden_estaciones)


```

## Variables de interés

```{r explicacion variables, warning = FALSE}
spotify2 %>% 
  glimpse
```

## Puntos de interés

1.  Características comunes de las canciones

    -   Considerando las 100 canciones más reproducidas

2.  Análisis de las reproducciones de la canción según la estación del año.

3.  Top 5 artistas con más canciones en el dataset y comparación de las propiedades

4.  Estudio de las canciones según la época y características.

5.  ¿Son igual de famosas las canciones en distintas plataformas?.

## Top canciones y artistas

```{r gráfico top 10 canciones, fig.width = 12, fig.height = 6, warning = FALSE}
a10 <- spotify2 %>%
  arrange(desc(streams)) %>%
  slice_head( n = 10 )

colores_degradados2 <- rainbow(length(unique(a10$artist)),start = .7, end = 1)

a10_gg =  a10 %>%
  ggplot() + 
  geom_col(aes(x = reorder(track_name, desc(streams)) , y = streams, fill = a10$artist)) +
  scale_fill_manual(values = colores_degradados2, breaks = a10$artist) +
  
  labs(title = "Top 10 canciones más reproducidas", x = "Canción", y = "Reproducciones ") +
  
  guides(fill = guide_legend(title = "Artista")) +
  
  theme_bw() + 

  theme(axis.text = element_text(face = "bold",angle = 25, vjust = 0.5, hjust = 1),
        axis.title = element_text(face = "bold"),
        legend.title = element_text(size = 10, face = "bold")) +
  theme(plot.title=element_text(size=20, face='bold', color='purple'))



```

```{r gráfico top 10 cantantes, fig.width = 12, fig.height = 6}

b10 <- spotify2 %>%
  arrange(desc(artist_streams)) %>%
  distinct(artist, .keep_all = TRUE) %>% #elimina las filas duplicadas en funcion de la columna artist_name
  slice_head( n = 10 )

colores_degradados3 <- colorRampPalette(c("cyan3", "yellow2"))(length(unique(b10$track_name)))




b10_gg = b10 %>%
  
  ggplot() + 
  geom_col(aes(x = reorder(artist, desc(artist_streams)) , y = artist_streams, fill = artist)) +

  scale_fill_manual(values = colores_degradados3,breaks = b10$artist) +
  
  labs(title = "Top 10 artistas con más reproducciones",x = "Artista", y = "Reproducciones ") +
  
  guides(fill = guide_legend(title = "Artista")) +
  
  theme_bw() + 
  
  theme(axis.text = element_text(face = "bold", angle = 25, vjust = 0.5, hjust = 1),
        axis.title = element_text(face = "bold"),
        legend.title = element_text(size = 10, face = "bold")) +
  theme(plot.title=element_text(size=20, face='bold', color='cyan3'), plot.subtitle = element_text(size=20, face='bold'))



```

```{r gráficos de interés,fig.width = 15, fig.height = 10, warning = FALSE}

a10_gg + b10_gg

```

## [Vector de medias y matriz de correlaciones]{.r-fit-text}

::: panel-tabset
### Vector de medias

```{r vector medias}
v_medias <- spotify2 %>% 
  summarise(across(where(is.numeric), ~mean(., na.rm = TRUE)))

as.list(v_medias)
```

### Matriz de correlación

```{r matriz correlaciones, fig.width = 18, fig.height = 11}
spotify2 %>%
  select(where(is.numeric)) %>%
  na.omit(.) %>% 
  cor(.) %>% 
  corPlot(., cex = 1 , main = "Correlación Entre Variables Cuantitativas", 
          xsrt = -30)
```
:::

## 1. Características comunes.

::: panel-tabset
### Correlaciones

```{r correlación caracteristicas, fig.width = 10, fig.height = 6}
spotify2 %>%
  select(streams,bpm, 20:26) %>%
  na.omit(.) %>% 
  cor(.) %>% 
  corPlot(., cex = 0.5, main = "Correlación entre Características", xsrt = -30)
```

### Matriz de dispersión

```{r matriz dispersion, fig.height=8, fig.width=15}
matriz_dispersion <- spotify2 %>% 
  select(19:23) %>% 
  ggpairs(aes(color = spotify2$mode, alpha = 0.75))

matriz_dispersion
```
:::

## 1.1 Solo las 100 canciones más reproducidas

```{r top 100 canciones, warning=FALSE}
top100canciones <- spotify2 %>% 
  slice_max(streams, n = 100)
```

::: panel-tabset
### Correlaciones

```{r correlación caracteristicas top100, fig.width = 10, fig.height = 6}
top100canciones %>%
  select(streams,bpm, 20:26) %>%
  na.omit(.) %>% 
  cor(.) %>% 
  corPlot(., cex = 0.5, main = "Correlación entre Características de las 100", xsrt = -30)
```

### Matriz de dispersión

```{r matriz dispersion top100, fig.height=8, fig.width=15}
top100canciones %>% 
  select(19:23) %>% 
  ggpairs(aes(color = top100canciones$mode, alpha = 0.75))
```
:::

```{r}
## [Contrastes de hipótesis]{.r-fit-text}
```

## Contrastes de hipótesis

### Bailable y positividad

X e Y son `dance%` y `valence%` respectivamente: $$\begin{cases}
H_{0}: &  \rho_{X,Y}=0\\
H_{1}: & \rho_{X,Y}>0
\end{cases}$$

```{r}

cor.test(spotify2$`dance%`, spotify2$`valence%` , alternative="greater")

```

## 

### Energía y positividad

X e Y son `energy%` y `valence%` respectivamente: $$\begin{cases}
H_{0}: &  \rho_{X,Y}=0\\
H_{1}: & \rho_{X,Y}>0
\end{cases}$$

```{r}

cor.test(spotify2$`energy%`, spotify2$`valence%`, alternative="greater")

```

## 

### Energía y acústica

X e Y son `energy%` y `acoustic%` respectivamente: $$\begin{cases}
H_{0}: &  \rho_{X,Y}=0\\
H_{1}: & \rho_{X,Y}<0
\end{cases}$$

```{r}

cor.test(spotify2$`energy%`, spotify2$`acoustic%`, alternative="less")

```

## 2. Analisis de las reproducciones según la estación del año.

::: panel-tabset
### Estaciones

```{r streams segun estacion, fig.height=5, fig.width=8, fig.align='center'}
colores_clase = c("#83CC3A", "#EDED2A", "#B66F01", "#A0EAF1")

spotify2 %>% 
  drop_na(released_season, streams) %>% 
  group_by(released_season) %>% 
  ggplot() + 
  geom_boxplot(aes(x = released_season, y = streams, color = released_season)) +
  stat_summary(aes(x = released_season, y = streams),
               fun = mean, geom = "point", shape = 19, size = 1, color = "black") +
  labs(x = "Estación de lanzamiento", y = "Reproducciones en Spotify", 
       color = "Estaciones del año") +
  theme_bw() + 
  theme(axis.text = element_text(face = "bold"),
        axis.title = element_text(face = "bold"),
        legend.title = element_text(size = 10, face = "bold")) + 
  scale_color_manual(values = colores_clase)
```

### Meses

```{r streams segun mes, fig.height=5, fig.width=10}
colores_clase = c(rep("#A0EAF1", 2), rep("#83CC3A", 3), rep("#EDED2A", 3),
                  rep("#B66F01", 3), "#A0EAF1")

meses <- c("January", "February", "March", "April", "May", "June", "July", "August",
           "September", "October", "November", "December")

spotify2 %>% 
  drop_na(released_season, streams) %>% 
  group_by(released_season) %>% 
  ggplot() + 
  geom_boxplot(aes(x = factor(released_month, levels = 1:12, labels = meses),
                   y = streams, color = released_month)) +
  stat_summary(aes(x = factor(released_month, levels = 1:12, labels = meses), 
                   y = streams),
               fun = mean, geom = "point", shape = 19, size = 1, color = "black") +
  labs(x = "Mes de lanzamiento", y = "Reproducciones en Spotify", 
       color = "Meses del año") +
  theme_bw() + 
  theme(axis.text = element_text(face = "bold"),
        axis.title = element_text(face = "bold"),
        legend.title = element_text(size = 10, face = "bold"),
        legend.position = "none") + 
  scale_color_manual(values = colores_clase)
```
:::

## 3. Top 5 artistas con más canciones(dataset) y comparación.

```{r top5}
# Dataset Artistas top5 - Num_canciones
top5 = spotify2 %>% 
  group_by(artist) %>% 
  summarise(count = n(), .groups = "drop") %>% 
  arrange(desc(count)) %>% 
  slice_head(n = 5)

top5
```

Estudio dividido en dos partes:

-   Nivel teórico: key, mode y bpm

-   Propiedades de las canciones: valence, energy...

## 

### Key

```{r, fig.width = 10, warning = FALSE}

spotify_top5 = spotify2 %>% 
  filter(artist %in% c("Taylor Swift", "The Weeknd", "Bad Bunny", "SZA", "Harry Styles")) %>% 
  arrange(artist)

# Dataset Artistas top5
spotify_top5_artists = spotify_top5 %>% 
  group_by(artist) %>% 
  summarise()


colores_degradados <- colorRampPalette(c("cyan3", "purple"))(length(unique(spotify_top5$key)))



spotify_top5 %>% 
  drop_na(key) %>% 
  ggplot() +
  geom_bar(aes(x = key, fill = key), alpha = 0.7) +
  facet_grid(.~artist) +
  
  scale_x_discrete(limits = c("C", "C#", "D", "D#", "E", "F", "G", "G#", "A", "A#", "B")) +
  scale_y_discrete(limits = 0:7) +
  
  labs(x= "Tonalidad de la canción", y= "Número de canciones") +
  
  theme_bw() +
  theme(axis.text = element_text(size=6),
        axis.title = element_text(size=10, face = "bold"),
        legend.title = element_text(size=10)) +
  
  guides(fill = guide_legend(title = "Tonalidad")) +
  
  scale_fill_manual(values = colores_degradados) +
  
  labs(title = "Frecuencias según la tonalidad",
       subtitle = "Top 5 artistas") +
  theme(plot.title=element_text(size=20, face='bold', color='blue'), plot.subtitle = element_text(size=20, face='bold'))

```

```{r tibble tono_mas_usado(top5)}

spotify_top5_key = cbind(spotify_top5_artists, Tono_mas_usado = c("C# - F", "E", "C# - F - G", "G", "A"))

spotify_top5_key
```

## 

### Key y mode

```{r grafica(key,mode,artist)2, fig.width = 10, warning = FALSE}

spotify_top5 %>% 
  drop_na(key, mode) %>% 
  ggplot() +
  geom_bar(aes(x = key, fill = key), alpha = 0.7) +
  facet_grid(mode~artist) +
  
  scale_x_discrete(limits = c("C", "C#", "D", "D#", "E", "F", "G", "G#", "A", "A#", "B")) +
  scale_y_discrete(limits = 0:7) +
  
  labs(x= "Tonalidad de la canción", y= "Número de canciones") +
  
  theme_bw() +
  theme(axis.text = element_text(size=8),
        axis.title = element_text(size=10, face = "bold"),
        legend.title = element_text(size=10)) +
  
  guides(fill = guide_legend(title = "Tonalidad")) +
  
  scale_fill_manual(values = colores_degradados) +
  
  labs(title = "Frecuencias según tonalidad y modo",
       subtitle = "Top 5 artistas") +
  theme(plot.title=element_text(size=20, face='bold', color='blue'), plot.subtitle = element_text(size=20, face='bold'))
  

```

```{r, Mayor_menor}

# Función para saber la diferencia Major - Minor
f = function(x){
  i = 1
  j = 1
  v = c(0)
  
  while(i < length(x)) {
    
    v[j] = x[i] - x[i+1]
    i = i+2
    j = j+1
  }
  return(v)
}

#Dataset con Artista ~ Mode - Frecuencia
Frecuencia = spotify_top5 %>% 
  group_by(artist, mode) %>% 
  summarise(Frecuencia = n(), .groups = "drop") %>% 
  pull(Frecuencia)



# Dataset con Artistas top5 - Frecuencia - Modo_dominante
major_minor = cbind(spotify_top5_artists, Major_Minor = f(Frecuencia)) %>% 
  mutate(Modo_dominante = case_when(
      Major_Minor > 0 ~ "Major",
      Major_Minor < 0 ~ "Minor",
      Major_Minor == 0 ~ "Ninguna"), .keep = "all")


major_minor

```

## 

::: panel-tabset
### Streams

```{r, streams por key, fig.width = 10}
spotify_top5 %>% 
  drop_na(key, streams) %>% 
  ggplot(aes(x = key, y = streams, color = mode)) +
  geom_point() +
  facet_grid(.~artist) +
  
  labs(x= "Tonalidad de la canción", y= "Streams") +
  guides(fill = guide_legend(title = "Modo")) +
  
  theme_bw() +
  theme(axis.text = element_text(size=8),
        axis.title = element_text(size=12, face = "bold"),
        legend.title = element_text(size = 15),
        legend.text = element_text(size = 15)) +
  
  labs(title = "Reproducciones según la tonalidad",
       subtitle = "Top 5 artistas") +
  theme(plot.title=element_text(size=20, face='bold', color='blue'), plot.subtitle = element_text(size=20, face='bold'))
  
```

### Media(modos)

Media muestral por modos

```{r media streams(mode)}

spotify_top5 %>% 
  group_by(artist, mode) %>% 
  summarise(Media_streams_modo = mean(streams), .groups = "drop")

```

### Media(tonos)

Media muestral por tonos.

```{r tabla media streams(key)}
tabla_media_key = spotify_top5 %>% 
  drop_na(key) %>% 
  group_by(artist, key) %>% 
  summarise(Media_streams_key = mean(streams), .groups = "drop") %>% 
  pivot_wider(names_from = key,
              values_from = Media_streams_key)



tonalidad_table = c("C#", "F", "G", "G#", "A", "A#", "B", "D", "D#", "E")


vec_max = c(0)
vec_max_key = c("0")

for(k in 1:5){
  vec_max[k] = max(tabla_media_key[k, -1], na.rm = TRUE)
  vec_max_key[k] = tonalidad_table[which.max(tabla_media_key[k, -1])]
  
}

tabla_media_key
```

Tonalidad con media muestral de streams más alta.

```{r media streams(key)}
cbind(spotify_top5_artists, Max = vec_max, Max_key = vec_max_key)


```
:::

## 

::: panel-tabset
### bpm

```{r grafico_top5(bpm), fig.width= 10}

spotify_top5 %>% 
  ggplot() +
  geom_point(aes(x = bpm, y = streams, color = artist), show.legend = FALSE) +
  facet_grid(.~ artist) +
  theme_bw() +
  
  labs(x= "bpm", y= "Streams") +
  guides(fill = guide_legend(title = "Artista")) +
  
  theme_bw() +
  theme(axis.text = element_text(size=8),
        axis.title = element_text(size=12, face = "bold")) +
  
  labs(title = "Reproducciones según el bpm por artista",
       subtitle = "Top 5 artistas") +
  theme(plot.title=element_text(size=20, face='bold', color='red'), plot.subtitle = element_text(size=20, face='bold'))
  


```

### tempo

```{r boxplot_bpm(top5), fig.width= 10}

spotify_top5 %>% 
  ggplot() +
  geom_boxplot(aes(x = tempo, y = streams, color = artist), show.legend = FALSE)+
  facet_grid(.~artist) +
  theme_bw()+
  geom_jitter(aes(x = tempo, y = streams, color = artist), alpha = 0.5, 
              show.legend = FALSE, 
              position = position_jitter(width = 0.2, seed = 0)) +
  labs(x = "Tempo", y = "Streams") +
  
  labs(title = "Reproducciones según el tempo",
       subtitle = "Top 5 artistas") +
  theme(plot.title=element_text(size=20, face='bold', color='red'), plot.subtitle = element_text(size=20, face='bold'))


```

### bpm 90-120

```{r boxplot_bpm_90_120(top5), fig.width=10}


spotify_top5 %>% 
  filter(between(bpm, 90, 120)) %>% 
  ggplot() +
  geom_boxplot(aes(x = artist, y = streams, color = artist), show.legend = FALSE)+
  theme_bw()+
  geom_jitter(aes(x = artist, y = streams, color = artist), alpha = 0.5, 
              show.legend = FALSE, 
              position = position_jitter(width = 0.2, seed = 0)) +
  labs(x = "Artista", y = "Streams") +
  labs(title = "Reproducciones del top 5 artistas",
       subtitle = "Boxplot, bpm entre 90 y 120") +
  
  theme(plot.title=element_text(size=20, face='bold', color='red'), plot.subtitle = element_text(size=20, face='bold'))


```
:::

## Propiedades por artista

```{r ggradar_artistas_top5, fig.pos="center", warning = FALSE}


# Consideramos las columnas 'artistas' y las de % ; Agrupamos por artistas y hacemos la media
spotify_top5_perc = spotify_top5 %>% 
  select(artist,contains("%")) %>% 
  group_by(artist) %>% 
  summarise(
    across(contains("%"), ~ mean(., na.rm = T))
  )



# Gráfico radar
ggradar(spotify_top5_perc,
        
        #Tamaño texto
        base.size = 15,
        
        # Límites
        grid.min = 0,
        grid.mid = 50,
        grid.max = 100,
        
        # Valores de los límites
        values.radar = c("0%","50%","100%"),
        
        #Fondo
        background.circle.colour = "white",
        
        # Tamaño texto variables
        axis.label.size = 4,
        
        # Color líneas límites
        gridline.min.colour = "gray60",
        gridline.mid.colour = "gray60",
        gridline.max.colour = "gray60",
        gridline.min.linetype = 1,
        gridline.mid.linetype = 1,
        gridline.max.linetype = 1,
        
        # Las líneas y los puntos del radar
        group.line.width = 1.25,
        group.point.size = 5,
        
        # Leyenda
        legend.title = "Artista",
        legend.position = "right",
        legend.text.size = 10
        )


```

## 4. Estudio de las canciones según la época y características.

```{r}
## [4. Estudio de las canciones según la época y características.]{.r-fit-text}

```

Análisis de las canciones más famosas según la época:

-   Época 1: 1933 - 1999

-   Época 2: 2000 - 2015

-   Época 3: 2016 - 2021

-   Época 4: 2022 - 2023

## 

### Key y mode

```{r grafico_tonalidad_frecuencia(epocas), fig.width= 10}

spotify2 %>% 
  drop_na(key, mode) %>%
  group_by(epoca, key, mode) %>% 
  summarise(Frecuencias = n(), .groups = "drop") %>% 
  ggplot() +
  geom_point(aes(x = key, y = Frecuencias, color = mode), alpha = 0.6) +
  facet_grid(.~epoca) +
  
  theme_bw() +
  labs(x= "Tonalidad de la canción", y= "Frecuencias") +
  guides(fill = guide_legend(title = "Modo")) +
  
  theme_bw() +
  theme(axis.text = element_text(size=8),
        axis.title = element_text(size=12, face = "bold"),
        legend.title = element_text(size = 15),
        legend.text = element_text(size = 15)) +
  scale_x_discrete(limits = c("C", "C#", "D", "D#", "E", "F", "G", "G#", "A", "A#", "B")) +
  
  labs(title = "Frecuencias según la tonalidad",
       subtitle = "Épocas") +
  theme(plot.title=element_text(size=20, face='bold', color='blue'), plot.subtitle = element_text(size=20, face='bold'))



```

## 

::: panel-tabset
### Spotify

```{r boxplot_epocas_spotify, warning=FALSE}

ggboxplot(spotify2, x = "epoca" ,y = "in_spotify_playlists",
          xlab = "Épocas",
          ylab = "Número de playlists en Spotify",
          size = 0.7,
          add="jitter",
          shape="epoca",
          notch = FALSE,
          color="epoca",
          palette = c("#00AFBB", "#E7B800", "#FC4E07","#BB3099")) +
  scale_x_discrete(label = c("1930-1999", "2000-2015", "2016-2021", "2022-2023")) +
  scale_y_continuous(breaks = c(0, 5000, seq(10000, 50000, by = 10000)))

```

### Apple Music

```{r boxplot_epocas_apple, fig.pos = "center", warning=FALSE}

ggboxplot(spotify2, x = "epoca" ,y = "in_apple_playlists",
          xlab = "Épocas",
          ylab = "Número de playlists en Apple Music",
          size = 0.7,
          add="jitter",
          shape="epoca",
          notch = FALSE,
          color="epoca",
          palette = c("#00AFBB", "#E7B800", "#FC4E07","#BB3099")) +
  scale_x_discrete(label = c("1930-1999", "2000-2015", "2016-2021", "2022-2023")) +
  scale_y_continuous(breaks = c(0, 50, seq(100, 700, by = 100)))
  

```

### Deezer

```{r boxplot_epocas_deezer, warning=FALSE}

ggboxplot(spotify2, x = "epoca" ,y = "in_deezer_playlists",
          xlab = "Épocas",
          ylab = "Número de playlists en Deezer",
          size = 0.7,
          add="jitter",
          shape="epoca",
          notch = FALSE,
          color="epoca",
          palette = c("#00AFBB", "#E7B800", "#FC4E07","#BB3099")) +
  scale_x_discrete(label = c("1930-1999", "2000-2015", "2016-2021", "2022-2023")) +
  scale_y_continuous(breaks = c(0, 500, 1000, 2000, 5000, 10000))
  

```
:::

## 

### Propiedades de las canciones

```{r ggradar_epocas, fig.pos="center", warning = FALSE}


# Consideramos las columnas 'artistas' y las de % ; Agrupamos por artistas y hacemos la media
spotify_epoca_perc = spotify2 %>% 
  select(epoca, contains("%")) %>% 
  group_by(epoca) %>% 
  summarise(
    across(contains("%"), ~ mean(., na.rm = T))
  )


# Gráfico radar
ggradar(spotify_epoca_perc,
        
        #Tamaño texto
        base.size = 15,
        
        # Límites
        grid.min = 0,
        grid.mid = 50,
        grid.max = 100,
        
        # Valores de los límites
        values.radar = c("0%","50%","100%"),
        
        #Fondo
        background.circle.colour = "white",
        
        # Tamaño texto variables
        axis.label.size = 4,
        
        # Color líneas límites
        gridline.min.colour = "gray60",
        gridline.mid.colour = "gray60",
        gridline.max.colour = "gray60",
        gridline.min.linetype = 1,
        gridline.mid.linetype = 1,
        gridline.max.linetype = 1,
        
        # Las líneas y los puntos del radar
        group.line.width = 1.25,
        group.point.size = 5,
        
        # Leyenda
        legend.title = "Época",
        legend.position = "right",
        legend.text.size = 10
        )


```

## Correlación por épocas

```{r correlacion(epocas)}


par(mfrow = c(2,2))

corplot_ep1 = spotify2 %>%
  filter(epoca == "Epoca_1") %>%
  select("dance%", "valence%", "energy%", "acoustic%", "instrumental%", "live%") %>% 
  na.omit() %>% 
  cor() %>% 
  corrplot(title = "Época 1")


corplot_ep2 = spotify2 %>%
  filter(epoca == "Epoca_2") %>%
  select("dance%", "valence%", "energy%", "acoustic%", "instrumental%", "live%") %>%
  na.omit() %>% 
  cor() %>% 
  corrplot(title = "Época 2")



corplot_ep3 = spotify2 %>%
  filter(epoca == "Epoca_3") %>%
  select("dance%", "valence%", "energy%", "acoustic%", "instrumental%", "live%") %>%
  na.omit() %>% 
  cor() %>% 
  corrplot(title = "Época 3")



corplot_ep4 = spotify2 %>%
  filter(epoca == "Epoca_4") %>%
  select("dance%", "valence%", "energy%", "acoustic%", "instrumental%", "live%") %>%
  na.omit() %>% 
  cor() %>% 
  corrplot(title = "Época 4")


par(mfrow = c(1,1))


```

## 5. ¿Son igual de famosas las canciones en distintas plataformas?.

```{r correlacion por plataformas,fig.height=8, fig.width=15}


matriz_dispersionn <- spotify2 %>% 
  select(collaboration, streams, matches("in_\\w*_")) %>% 
  ggpairs(aes(color = spotify2$collaboration, alpha = 0.75))

matriz_dispersionn

```

## Conclusiones

No hay una fórmula mágica

Conclusiones por puntos

1.  

    -   Asociaciónes positivas: `energy%`\~`valence%` y `dance%`\~`valence%`
    -   Asociación negativa: `energy%`\~`acoustic%`

2.  

    -   Estación no es determinante
    -   Casos enero y febrero
    

3.  

    -   Tonalidad no es relevante
    -   Modo: mayor
    
## Conclusiones
    
4.  

    -   No hay diferencia en el número de playlists
    -   Sí la hay en el rango
    -   Mismas propiedades
    
5.

Bad Bunny o Taylor Swift
